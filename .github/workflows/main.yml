name: Tests
on: [push]

jobs:
  check-go:
    runs-on: ubuntu-22.04

    concurrency:
      group: ${{ github.ref }}-check-go
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v3

      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: ~1.20
          cache-dependency-path: backend/go.sum
          cache: true

      - name: Download go modules
        run: |
          cd backend/
          go mod download

      - name: Format
        run: |
          cd backend/
          if ! test -z "`gofmt -s -l .`"; then
            gofmt -s -l .
            exit 1
          fi

      - name: Generate
        run: |
          # Generating a pseudo frontend build so that vet
          # does not complain about the lack of an embed target
          mkdir ./frontend/out
          echo 'hello' > ./frontend/out/index.html

          # Run generate for both targets
          cd backend/
          go generate -x ./...
          go generate -x -tags prod ./...

      - name: Vet
        run: |
          cd backend/
          go vet ./...
          go vet -tags prod ./...
          GOOS=windows go vet -tags prod ./...

  test-go:
    needs: [check-go]
    strategy:
      matrix:
        runner: [ubuntu-22.04, windows-2022]

    runs-on: ${{ matrix.runner }}

    concurrency:
      group: ${{ github.ref }}-test-go-${{ matrix.runner }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v3

      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: ~1.20
          cache-dependency-path: backend/go.sum
          cache: true

      - name: Download go modules
        run: |
          cd backend/
          go mod download

      - name: Generate
        run: |
          # Generating a pseudo frontend build so that vet
          # does not complain about the lack of an embed target
          mkdir ./frontend/out
          echo 'hello' > ./frontend/out/index.html

          # Run generate for both targets
          cd backend/
          go generate -x ./...
          go generate -x -tags prod ./...

      - name: Test
        run: |
          cd backend/
          go test -v -race -timeout 10s ./...

  check-ts:
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.ref }}-check-ts
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v3

      - id: node-version
        name: Get node version
        run: |
          echo "version=`cat .nvmrc`" >> $GITHUB_OUTPUT

      - name: Setup Node.js for use with actions
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.node-version.outputs.version }}

      - name: Install Node.js dependencies
        run: |
          yarn

          if ! test -z "`git diff --stat`"; then
            echo "yarn produced changes, exiting"
            git diff --name-only | cat
            exit 1
          fi

      - name: Lint toolkit
        run: |
          yarn workspace @robinplatform/toolkit run lint

      - name: Build toolkit
        run: |
          yarn workspace @robinplatform/toolkit run build

      - name: Lint frontend
        run: |
          yarn workspace @robinplatform/frontend run lint

      - name: Build frontend
        run: |
          yarn workspace @robinplatform/frontend run build

  release:
    if: "${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/nightly' }}"
    needs: [check-go, test-go, check-ts]
    concurrency:
      group: ${{ github.ref }}-release
      cancel-in-progress: true

    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: ~1.20

      - name: Download go modules
        run: |
          cd backend/
          go mod download

      - name: Generate
        run: |
          cd backend/
          go generate -x ./...

      - id: node-version
        name: Get node version
        run: |
          echo "version=`cat .nvmrc`" >> $GITHUB_OUTPUT

      - name: Setup Node.js for use with actions
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.node-version.outputs.version }}

      - name: Install Node.js dependencies
        run: yarn

      - name: Build toolkit
        run: |
          yarn workspace @robinplatform/toolkit run build

      - name: Build frontend
        run: |
          yarn workspace @robinplatform/frontend run build

      - name: Install s3cmd
        run: |
          pip3 install s3cmd --no-cache

      - name: Configure s3cmd
        env:
          S3CFG: ${{ secrets.S3CFG }}
        run: |
          echo $S3CFG | base64 --decode > ~/.s3cfg

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install upx
        run: |
          sudo apt-get install -yq upx

      - name: Release nightly
        if: "github.ref == 'refs/heads/nightly'"
        run: |
          yarn workspace @robinplatform/backend run release nightly

      - name: Release beta
        if: "github.ref == 'refs/heads/main'"
        run: |
          yarn workspace @robinplatform/backend run release beta

      - name: Flush CDN Cache
        run: |
          doctl compute cdn flush 98986f5e-330d-49a9-8d01-5344c7cf2cd0
